commit edf1c0e698954cd57525458c8289ab8281866fb0
Author: Dominik RÃ¶ttsches <drott@chromium.org>
Date:   Fri May 3 11:20:59 2019 +0000

    Remove alternative code path when building against system ICU
    
    We provided a separate code path when building against system ICU since
    internally we were building against a non-public UTrie2 API. Now that we
    have switched over to using UCPTrie, which is a public API, remove the
    separate fallback code path.
    
    Bug: 882279
    Change-Id: I13c2a974d4fd265d40037b8b4a72e543fcd63e42
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1593380
    Commit-Queue: Koji Ishii <kojii@chromium.org>
    Reviewed-by: Koji Ishii <kojii@chromium.org>
    Cr-Commit-Position: refs/heads/master@{#656343}

diff --git a/third_party/blink/renderer/platform/text/character.cc b/third_party/blink/renderer/platform/text/character.cc
index faba1e4f0122..f6233569a46e 100644
--- a/third_party/blink/renderer/platform/text/character.cc
+++ b/third_party/blink/renderer/platform/text/character.cc
@@ -30,6 +30,7 @@
 
 #include "third_party/blink/renderer/platform/text/character.h"
 
+#include <unicode/ucptrie.h>
 #include <unicode/uobject.h>
 #include <unicode/uscript.h>
 #include <algorithm>
@@ -40,38 +41,9 @@
 #include "third_party/blink/renderer/platform/wtf/std_lib_extras.h"
 #include "third_party/blink/renderer/platform/wtf/text/string_builder.h"
 
-#if defined(USING_SYSTEM_ICU)
-#include <unicode/uniset.h>
-#else
-#include <unicode/ucptrie.h>
-#endif
 
 namespace blink {
 
-#if defined(USING_SYSTEM_ICU)
-static icu::UnicodeSet* createUnicodeSet(const UChar32* characters,
-                                         size_t charactersCount,
-                                         const UChar32* ranges,
-                                         size_t rangesCount) {
-  icu::UnicodeSet* unicodeSet = new icu::UnicodeSet();
-  for (size_t i = 0; i < charactersCount; i++)
-    unicodeSet->add(characters[i]);
-  for (size_t i = 0; i < rangesCount; i += 2)
-    unicodeSet->add(ranges[i], ranges[i + 1]);
-  unicodeSet->freeze();
-  return unicodeSet;
-}
-
-#define CREATE_UNICODE_SET(name)                                       \
-  createUnicodeSet(name##Array, base::size(name##Array), name##Ranges, \
-                   base::size(name##Ranges))
-
-#define RETURN_HAS_PROPERTY(c, name)            \
-  static icu::UnicodeSet* unicodeSet = nullptr; \
-  if (!unicodeSet)                              \
-    unicodeSet = CREATE_UNICODE_SET(name);      \
-  return unicodeSet->contains(c);
-#else
 static UCPTrie* CreateTrie() {
   // Create a Trie from the value array.
   ICUError error;
@@ -90,38 +62,25 @@ static bool HasProperty(UChar32 c, CharacterProperty property) {
          static_cast<CharacterPropertyType>(property);
 }
 
-#define RETURN_HAS_PROPERTY(c, name) \
-  return HasProperty(c, CharacterProperty::name);
-#endif
-
-// Takes a flattened list of closed intervals
-template <class T, size_t size>
-bool ValueInIntervalList(const T (&interval_list)[size], const T& value) {
-  const T* bound =
-      std::upper_bound(&interval_list[0], &interval_list[size], value);
-  if ((bound - interval_list) % 2 == 1)
-    return true;
-  return bound > interval_list && *(bound - 1) == value;
-}
-
 bool Character::IsUprightInMixedVertical(UChar32 character) {
-  RETURN_HAS_PROPERTY(character, kIsUprightInMixedVertical)
+  return HasProperty(character, CharacterProperty::kIsUprightInMixedVertical);
 }
 
 bool Character::IsCJKIdeographOrSymbolSlow(UChar32 c) {
-  RETURN_HAS_PROPERTY(c, kIsCJKIdeographOrSymbol)
+  return HasProperty(c, CharacterProperty::kIsCJKIdeographOrSymbol);
 }
 
 bool Character::IsPotentialCustomElementNameChar(UChar32 character) {
-  RETURN_HAS_PROPERTY(character, kIsPotentialCustomElementNameChar);
+  return HasProperty(character,
+                     CharacterProperty::kIsPotentialCustomElementNameChar);
 }
 
 bool Character::IsBidiControl(UChar32 character) {
-  RETURN_HAS_PROPERTY(character, kIsBidiControl);
+  return HasProperty(character, CharacterProperty::kIsBidiControl);
 }
 
 bool Character::IsHangulSlow(UChar32 character) {
-  RETURN_HAS_PROPERTY(character, kIsHangul);
+  return HasProperty(character, CharacterProperty::kIsHangul);
 }
 
 unsigned Character::ExpansionOpportunityCount(
diff --git a/third_party/blink/renderer/platform/text/character_property_data.h b/third_party/blink/renderer/platform/text/character_property_data.h
index 481db0a33693..e91712f01b8d 100644
--- a/third_party/blink/renderer/platform/text/character_property_data.h
+++ b/third_party/blink/renderer/platform/text/character_property_data.h
@@ -260,11 +260,9 @@ static const UChar32 kIsHangulRanges[] = {
 
 static const UChar32 kIsHangulArray[] = {};
 
-#if !defined(USING_SYSTEM_ICU)
 // Freezed trie tree, see character_property_data_generator.cc.
 extern const int32_t kSerializedCharacterDataSize;
 extern const uint8_t kSerializedCharacterData[];
-#endif
 
 }  // namespace blink
 
diff --git a/third_party/blink/renderer/platform/text/character_property_data_generator.cc b/third_party/blink/renderer/platform/text/character_property_data_generator.cc
index 13cb44b0c3da..9ee904369ba8 100644
--- a/third_party/blink/renderer/platform/text/character_property_data_generator.cc
+++ b/third_party/blink/renderer/platform/text/character_property_data_generator.cc
@@ -4,25 +4,19 @@
 
 #include "third_party/blink/renderer/platform/text/character_property_data.h"
 
-#include "base/logging.h"
-
 #include <stdio.h>
 #include <cassert>
 #include <cstring>
 #include <memory>
-#include "third_party/blink/renderer/platform/text/character_property.h"
-#if !defined(USING_SYSTEM_ICU)
 #include <unicode/ucptrie.h>
 #include <unicode/umutablecptrie.h>
-#endif
+
+#include "base/logging.h"
+#include "third_party/blink/renderer/platform/text/character_property.h"
 
 namespace blink {
 namespace {
 
-#if defined(USING_SYSTEM_ICU)
-static void GenerateCharacterPropertyData(FILE*) {}
-#else
-
 const UChar32 kMaxCodepoint = 0x10FFFF;
 #define ARRAY_LENGTH(a) (sizeof(a) / sizeof((a)[0]))
 
@@ -131,7 +125,6 @@ static void GenerateCharacterPropertyData(FILE* fp) {
 
   GenerateUTrieSerialized(fp, serialized_size, serialized.get());
 }
-#endif
 
 }  // namespace
 }  // namespace blink
