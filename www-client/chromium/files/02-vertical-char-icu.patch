commit eb5539d9fe842af37f3d32bf73e81a2c012df29d
Author: Dominik Röttsches <drott@chromium.org>
Date:   Mon May 27 04:37:22 2019 +0000

    Move vertical orientation character function to using ICU
    
    Since ICU 63 the library provides a function for returning Unicode TR#50
    vertical orientation information. Instead of maintaining our own
    codepoint set definition, move this to using the ICU function.
    
    Thanks for Frank Tang (ftang@) for adding these parts of ICU to our ICU
    build.
    
    Bug: 882279
    Change-Id: I462d45e23ed822ebebefe5a4071d1df5b4db2e09
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/1602495
    Commit-Queue: Koji Ishii <kojii@chromium.org>
    Reviewed-by: Koji Ishii <kojii@chromium.org>
    Auto-Submit: Dominik Röttsches <drott@chromium.org>
    Cr-Commit-Position: refs/heads/master@{#663475}

diff --git a/third_party/blink/renderer/platform/text/character.cc b/third_party/blink/renderer/platform/text/character.cc
index f6233569a46e..0dc3227e31ff 100644
--- a/third_party/blink/renderer/platform/text/character.cc
+++ b/third_party/blink/renderer/platform/text/character.cc
@@ -30,6 +30,7 @@
 
 #include "third_party/blink/renderer/platform/text/character.h"
 
+#include <unicode/uchar.h>
 #include <unicode/ucptrie.h>
 #include <unicode/uobject.h>
 #include <unicode/uscript.h>
@@ -63,7 +64,9 @@ static bool HasProperty(UChar32 c, CharacterProperty property) {
 }
 
 bool Character::IsUprightInMixedVertical(UChar32 character) {
-  return HasProperty(character, CharacterProperty::kIsUprightInMixedVertical);
+  return u_getIntPropertyValue(character,
+                               UProperty::UCHAR_VERTICAL_ORIENTATION) !=
+         UVerticalOrientation::U_VO_ROTATED;
 }
 
 bool Character::IsCJKIdeographOrSymbolSlow(UChar32 c) {
diff --git a/third_party/blink/renderer/platform/text/character_property_data_generator.cc b/third_party/blink/renderer/platform/text/character_property_data_generator.cc
index 9ee904369ba8..fcd21a87620b 100644
--- a/third_party/blink/renderer/platform/text/character_property_data_generator.cc
+++ b/third_party/blink/renderer/platform/text/character_property_data_generator.cc
@@ -76,7 +76,6 @@ static void GenerateCharacterPropertyData(FILE* fp) {
             CharacterProperty::name);
 
   SET(kIsCJKIdeographOrSymbol);
-  SET(kIsUprightInMixedVertical);
   SET(kIsPotentialCustomElementNameChar);
   SET(kIsBidiControl);
   SET(kIsHangul);
diff --git a/third_party/blink/renderer/platform/text/character_test.cc b/third_party/blink/renderer/platform/text/character_test.cc
index 504e37a8a5c7..1870ae9a646a 100644
--- a/third_party/blink/renderer/platform/text/character_test.cc
+++ b/third_party/blink/renderer/platform/text/character_test.cc
@@ -382,4 +382,33 @@ TEST(CharacterTest, IsNonCharacter) {
   }
 }
 
+TEST(CharacterTest, TransformedIsUprightInMixedVertical) {
+  // Compare
+  // https://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AVertical_Orientation%3DTransformed_Upright%3A%5D&g=&i=
+  const UChar32 vertical_orientation_transformed_upright_category[] = {
+      0x3001, 0x3002,  0x3041, 0x3043, 0x3045, 0x3047, 0x3049, 0x3063, 0x3083,
+      0x3085, 0x3087,  0x308E, 0x3095, 0x3096, 0x309B, 0x309C, 0x30A1, 0x30A3,
+      0x30A5, 0x30A7,  0x30A9, 0x30C3, 0x30E3, 0x30E5, 0x30E7, 0x30EE, 0x30F5,
+      0x30F6, 0x3127,  0x31F0, 0x31F1, 0x31F2, 0x31F3, 0x31F4, 0x31F5, 0x31F6,
+      0x31F7, 0x31F8,  0x31F9, 0x31FA, 0x31FB, 0x31FC, 0x31FD, 0x31FE, 0x31FF,
+      0x3300, 0x3301,  0x3302, 0x3303, 0x3304, 0x3305, 0x3306, 0x3307, 0x3308,
+      0x3309, 0x330A,  0x330B, 0x330C, 0x330D, 0x330E, 0x330F, 0x3310, 0x3311,
+      0x3312, 0x3313,  0x3314, 0x3315, 0x3316, 0x3317, 0x3318, 0x3319, 0x331A,
+      0x331B, 0x331C,  0x331D, 0x331E, 0x331F, 0x3320, 0x3321, 0x3322, 0x3323,
+      0x3324, 0x3325,  0x3326, 0x3327, 0x3328, 0x3329, 0x332A, 0x332B, 0x332C,
+      0x332D, 0x332E,  0x332F, 0x3330, 0x3331, 0x3332, 0x3333, 0x3334, 0x3335,
+      0x3336, 0x3337,  0x3338, 0x3339, 0x333A, 0x333B, 0x333C, 0x333D, 0x333E,
+      0x333F, 0x3340,  0x3341, 0x3342, 0x3343, 0x3344, 0x3345, 0x3346, 0x3347,
+      0x3348, 0x3349,  0x334A, 0x334B, 0x334C, 0x334D, 0x334E, 0x334F, 0x3350,
+      0x3351, 0x3352,  0x3353, 0x3354, 0x3355, 0x3356, 0x3357, 0x337B, 0x337C,
+      0x337D, 0x337E,  0x337F, 0xFE50, 0xFE51, 0xFE52, 0xFF01, 0xFF0C, 0xFF0E,
+      0xFF1F, 0x1F200, 0x1F201};
+
+  for (UChar32 transformed_upright_character :
+       vertical_orientation_transformed_upright_category) {
+    EXPECT_TRUE(
+        Character::IsUprightInMixedVertical(transformed_upright_character));
+  }
+}
+
 }  // namespace blink
--- a/third_party/blink/renderer/platform/text/character_property_data.h
+++ b/third_party/blink/renderer/platform/text/character_property_data.h
@@ -110,107 +110,6 @@
     // ZIPPER-MOUTH FACE...SIGN OF THE HORNS
     0x1F910, 0x1F918, 0x1F919, 0x1F97F, 0x1F980, 0x1F9BF, 0x1F9C0, 0x1F9FF};
 
-// Individual codepoints needed for Unicode vertical text layout according to
-// http://www.unicode.org/reports/tr50/
-// Taken from the corresponding data file:
-// http://www.unicode.org/Public/vertical/revision-16/VerticalOrientation-16.txt
-static const UChar32 kIsUprightInMixedVerticalArray[] = {
-    0x000A7, 0x000A9, 0x000AE, 0x000B1, 0x000D7, 0x000F7};
-
-static const UChar32 kIsUprightInMixedVerticalRanges[] = {
-    0x000BC, 0x000BE,
-    // Spacing Modifier Letters (Part of)
-    0x002EA, 0x002EB,
-    // Hangul Jamo
-    0x01100, 0x011FF,
-    // Unified Canadian Aboriginal Syllabics
-    0x01401, 0x0167F,
-    // Unified Canadian Aboriginal Syllabics Extended
-    0x018B0, 0x018FF,
-    // General Punctuation (Part of)
-    0x02016, 0x02016, 0x02020, 0x02021, 0x02030, 0x02031, 0x0203B, 0x0203C,
-    0x02042, 0x02042, 0x02047, 0x02049, 0x02051, 0x02051, 0x02065, 0x02069,
-    // Combining Diacritical Marks for Symbols (Part of)
-    0x020DD, 0x020E0, 0x020E2, 0x020E4,
-    // Letterlike Symbols (Part of)/Number Forms
-    0x02100, 0x02101, 0x02103, 0x02109, 0x0210F, 0x0210F, 0x02113, 0x02114,
-    0x02116, 0x02117, 0x0211E, 0x02123, 0x02125, 0x02125, 0x02127, 0x02127,
-    0x02129, 0x02129, 0x0212E, 0x0212E, 0x02135, 0x0213F, 0x02145, 0x0214A,
-    0x0214C, 0x0214D, 0x0214F, 0x02189, 0x0218C, 0x0218F,
-    // Mathematical Operators (Part of)
-    0x0221E, 0x0221E, 0x02234, 0x02235,
-    // Miscellaneous Technical (Part of)
-    0x02300, 0x02307, 0x0230C, 0x0231F, 0x02324, 0x0232B, 0x0237D, 0x0239A,
-    0x023BE, 0x023CD, 0x023CF, 0x023CF, 0x023D1, 0x023DB, 0x023E2, 0x02422,
-    // Control Pictures (Part of)/Optical Character Recognition/Enclosed
-    // Alphanumerics
-    0x02424, 0x024FF,
-    // Geometric Shapes/Miscellaneous Symbols (Part of)
-    0x025A0, 0x02619, 0x02620, 0x02767, 0x02776, 0x02793,
-    // Miscellaneous Symbols and Arrows (Part of)
-    0x02B12, 0x02B2F, 0x02B50, 0x02B59, 0x02BB8, 0x02BEB, 0x02BF0, 0x02BFF,
-    // Common CJK
-    0x02E80, 0x0A4CF,
-    // Hangul Jamo Extended-A
-    0x0A960, 0x0A97F,
-    // Hangul Syllables/Hangul Jamo Extended-B
-    0x0AC00, 0x0D7FF,
-    // Private Use Area/CJK Compatibility Ideographs
-    0x0E000, 0x0FAFF,
-    // Vertical Forms
-    0x0FE10, 0x0FE1F,
-    // CJK Compatibility Forms (Part of)
-    0x0FE30, 0x0FE48,
-    // Small Form Variants (Part of)
-    0x0FE50, 0x0FE57, 0x0FE59, 0x0FE62, 0x0FE67, 0x0FE6F,
-    // Halfwidth and Fullwidth Forms
-    0x0FF01, 0x0FF0C, 0x0FF0E, 0x0FF1B, 0x0FF1F, 0x0FF60, 0x0FFE0, 0x0FFE7,
-    // Specials (Part of)
-    0x0FFF0, 0x0FFF8, 0x0FFFC, 0x0FFFD,
-    // Meroitic Hieroglyphs
-    0x10980, 0x1099F,
-    // Siddham
-    0x11580, 0x115FF,
-    // Zanabazar Square
-    0x11A00, 0x11AAF,
-    // Egyptian Hieroglyphs
-    0x13000, 0x1342F,
-    // Anatolian Hieroglyphs
-    0x14400, 0x1467F,
-    // Ideographic Symbols and Punctuation
-    0x16FE0, 0x16FFF,
-    // Tangut
-    0x17000, 0x187FF,
-    // Tangut Components
-    0x18800, 0x18AFF,
-    // Kana Supplement
-    0x1B000, 0x1B0FF,
-    // Kana Extended-A
-    0x1B100, 0x1B12F,
-    // Nushu
-    0x1B170, 0x1B2FF,
-    // Byzantine Musical Symbols/Musical Symbols
-    0x1D000, 0x1D1FF,
-    // Tai Xuan Jing Symbols/Counting Rod Numerals
-    0x1D300, 0x1D37F,
-    // Sutton SignWriting
-    0x1D800, 0x1DAAF,
-    // Mahjong Tiles/Domino Tiles/Playing Cards/Enclosed Alphanumeric Supplement
-    // Enclosed Ideographic Supplement/Enclosed Ideographic Supplement
-    // Emoticons/Ornamental Dingbats/Transport and Map Symbols/Alchemical
-    // Symbols Alchemical Symbols
-    0x1F000, 0x1F7FF,
-    // Supplemental Symbols and Pictographs
-    0x1F900, 0x1F9FF,
-    // CJK Unified Ideographs Extension B/C/D
-    // CJK Compatibility Ideographs Supplement
-    0x20000, 0x2FFFD, 0x30000, 0x3FFFD,
-    // Supplementary Private Use Area-A
-    0xF0000, 0xFFFFD,
-    // Supplementary Private Use Area-B
-    0x100000, 0x10FFFD,
-};
-
 // https://html.spec.whatwg.org/multipage/scripting.html#prod-potentialcustomelementname
 static const UChar32 kIsPotentialCustomElementNameCharArray[] = {
     '-', '.', '_', 0xB7,
