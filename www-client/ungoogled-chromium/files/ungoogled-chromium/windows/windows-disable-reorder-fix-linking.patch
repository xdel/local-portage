# Disable reordering imports

--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -49,35 +49,6 @@ if (enable_resource_whitelist_generation
   chrome_resource_whitelist = "$target_gen_dir/chrome_resource_whitelist.txt"
 }
 
-if (is_win) {
-  action("reorder_imports") {
-    script = "//build/win/reorder-imports.py"
-
-    # See comment in chrome_dll.gypi in the hardlink_to_output
-    # target for why this cannot be 'initial' like the DLL.
-    inputs = [
-      "$root_out_dir/initialexe/chrome.exe",
-    ]
-    outputs = [
-      "$root_out_dir/chrome.exe",
-    ]
-    if (symbol_level != 0) {
-      outputs += [ "$root_out_dir/chrome.exe.pdb" ]
-    }
-    args = [
-      "-i",
-      rebase_path("$root_out_dir/initialexe", root_build_dir),
-      "-o",
-      rebase_path("$root_out_dir", root_build_dir),
-      "-a",
-      current_cpu,
-    ]
-    deps = [
-      ":chrome_initial",
-    ]
-  }
-}
-
 # This target exists above chrome and it's main components in the dependency
 # tree as a central place to put assert_no_deps annotations. Since this depends
 # on Chrome and the main DLLs it uses, it will transitively assert that those
@@ -112,9 +83,6 @@ if (!is_android && !is_mac) {
     data_deps = [
       ":chrome_initial",
     ]
-    if (is_win) {
-      public_deps += [ ":reorder_imports" ]
-    }
     if (use_aura && (is_win || is_linux)) {
       data_deps += [ "//chrome/app:service_manifests" ]
     }
@@ -333,11 +301,7 @@ if (!is_android && !is_mac) {
   }
 
   chrome_binary("chrome_initial") {
-    if (is_win) {
-      output_name = "initialexe/chrome"
-    } else {
-      output_name = "chrome"
-    }
+    output_name = "chrome"
 
     sources = []
     if (!is_win && use_aura) {
--- a/tools/perf/chrome_telemetry_build/BUILD.gn
+++ b/tools/perf/chrome_telemetry_build/BUILD.gn
@@ -40,10 +40,6 @@ group("telemetry_chrome_test") {
     "//components/crash/content/tools/generate_breakpad_symbols.py",
   ]
 
-  if (is_win) {
-    data_deps += [ "//chrome:reorder_imports" ]
-  }
-
   if (is_linux) {
     data_deps += [ "//third_party/breakpad:dump_syms($host_toolchain)" ]
   }
@@ -108,10 +104,6 @@ group("telemetry_chrome_test_without_chr
     "//components/crash/content/tools/generate_breakpad_symbols.py",
   ]
 
-  if (is_win) {
-    data_deps += [ "//chrome:reorder_imports" ]
-  }
-
   if (is_linux) {
     data_deps += [ "//third_party/breakpad:dump_syms($host_toolchain)" ]
   }
--- a/chrome/test/chromedriver/BUILD.gn
+++ b/chrome/test/chromedriver/BUILD.gn
@@ -348,11 +348,6 @@ python_library("chromedriver_py_tests")
   if (is_component_build && is_mac) {
     data_deps += [ "//chrome:chrome_framework" ]
   }
-
-  if (is_win) {
-    # On Windows, the following target produces the final chrome.exe
-    data_deps += [ "//chrome:reorder_imports" ]
-  }
 }
 
 test("chromedriver_unittests") {
