# Disables browser sign-in

--- a/components/signin/core/browser/signin_manager_base.cc
+++ b/components/signin/core/browser/signin_manager_base.cc
@@ -158,7 +158,7 @@ void SigninManagerBase::Initialize(PrefS
 bool SigninManagerBase::IsInitialized() const { return initialized_; }
 
 bool SigninManagerBase::IsSigninAllowed() const {
-  return client_->GetPrefs()->GetBoolean(prefs::kSigninAllowed);
+  return false;
 }
 
 AccountInfo SigninManagerBase::GetAuthenticatedAccountInfo() const {
--- a/chrome/browser/ui/chrome_pages.cc
+++ b/chrome/browser/ui/chrome_pages.cc
@@ -72,12 +72,6 @@ void OpenBookmarkManagerForNode(Browser*
   ShowSingletonTabOverwritingNTP(browser, std::move(params));
 }
 
-void NavigateToSingletonTab(Browser* browser, const GURL& url) {
-  NavigateParams params(GetSingletonTabNavigateParams(browser, url));
-  params.path_behavior = NavigateParams::IGNORE_AND_NAVIGATE;
-  ShowSingletonTabOverwritingNTP(browser, std::move(params));
-}
-
 // Shows either the help app or the appropriate help page for |source|. If
 // |browser| is NULL and the help page is used (vs the app), the help page is
 // shown in the last active browser. If there is no such browser, a new browser
@@ -384,57 +378,6 @@ void ShowSearchEngineSettings(Browser* b
 #if !defined(OS_ANDROID)
 void ShowBrowserSignin(Browser* browser,
                        signin_metrics::AccessPoint access_point) {
-  Profile* original_profile = browser->profile()->GetOriginalProfile();
-  SigninManagerBase* manager =
-      SigninManagerFactory::GetForProfile(original_profile);
-  DCHECK(manager->IsSigninAllowed());
-
-  // If the browser's profile is an incognito profile, make sure to use
-  // a browser window from the original profile. The user cannot sign in
-  // from an incognito window.
-  auto displayer =
-      std::make_unique<ScopedTabbedBrowserDisplayer>(original_profile);
-  browser = displayer->browser();
-
-#if defined(OS_CHROMEOS)
-  // ChromeOS always loads the chrome://chrome-signin in a tab.
-  const bool show_full_tab_chrome_signin_page = true;
-#else
-  // When Desktop Identity Consistency (aka DICE) is not enabled, Chrome uses
-  // a modal sign-in dialog for signing in. This sign-in modal dialog is
-  // presented as a tab-modal dialog (which is automatically dismissed when
-  // the page navigates). Displaying the dialog on a new tab that loads any
-  // page will lead to it being dismissed as soon as the new tab is loaded.
-  // So the sign-in dialog must only be presented on top of an existing tab.
-  //
-  // If ScopedTabbedBrowserDisplayer had to create a (non-incognito) Browser*,
-  // it won't have any tabs yet. Fallback to the full-tab sign-in flow in this
-  // case.
-  const bool show_full_tab_chrome_signin_page =
-      !signin::DiceMethodGreaterOrEqual(
-          AccountConsistencyModeManager::GetMethodForProfile(
-              browser->profile()),
-          signin::AccountConsistencyMethod::kDicePrepareMigration) &&
-      browser->tab_strip_model()->empty();
-#endif  // defined(OS_CHROMEOS)
-  if (show_full_tab_chrome_signin_page) {
-    NavigateToSingletonTab(
-        browser,
-        signin::GetPromoURLForTab(
-            access_point, signin_metrics::Reason::REASON_SIGNIN_PRIMARY_ACCOUNT,
-            false));
-    DCHECK_GT(browser->tab_strip_model()->count(), 0);
-  } else {
-#if defined(OS_CHROMEOS)
-    NOTREACHED();
-#else
-    profiles::BubbleViewMode bubble_view_mode =
-        manager->IsAuthenticated() ? profiles::BUBBLE_VIEW_MODE_GAIA_REAUTH
-                                   : profiles::BUBBLE_VIEW_MODE_GAIA_SIGNIN;
-    browser->signin_view_controller()->ShowSignin(bubble_view_mode, browser,
-                                                  access_point);
-#endif
-  }
 }
 
 void ShowBrowserSigninOrSettings(Browser* browser,
