--- a/crossdev	2018-05-12 19:18:47.326666666 +0000
+++ b/crossdev	2018-05-12 19:18:25.336666666 +0000
@@ -191,7 +191,7 @@
 				CTARGET="aarch${CTARGET#arm}-unknown-linux-gnu";;
 			arm*)
 				CTARGET="${CTARGET}-unknown-linux-gnueabi";;
-			aarch64*|alpha*|cris*|hppa*|ia64*|m68*|mips*|powerpc*|sparc*|sh*|tile*)
+			aarch64*|alpha*|cris*|hppa*|ia64*|m68*|mips*|powerpc*|riscv*|sparc*|sh*|tile*)
 				CTARGET="${CTARGET}-unknown-linux-gnu";;
 			bfin*|h8300*|msp430*|nds32*|nios2*|spu*|xc16x*)
 				CTARGET="${CTARGET}-elf";;
@@ -210,6 +210,7 @@
 		mips*)      TARCH=mips;;
 		powerpc64*) TARCH=ppc64;;
 		powerpc*)   TARCH=ppc;;
+		riscv*)     TARCH=riscv;;
 		sparc*)     TARCH=sparc;;
 		s390*)      TARCH=s390;;
 		sh*)        TARCH=sh;;
@@ -228,10 +229,11 @@
 		avr*) KPKG="[none]"
 		      LCAT="dev-embedded"
 		      LPKG="avr-libc"
-		      GUSE+=" -fortran -go" # doesn't work
+		      GUSE+=" -fortran -go -pie nopie" # doesn't work
 		      MULTILIB_USE="yes" #377039
 		      BUSE+=" cxx"
 		      STAGE_DEFAULT=${STAGE_LIBC}
+		      MAKE_SYMLINK="yes"
 		      WITH_DEF_HEADERS="no";;
 
 		# Has no glibc support yet (or even ABI defined). Can
@@ -322,7 +324,6 @@
 			KPKG="[none]"
 			STAGE_DEFAULT=${STAGE_LIBC}
 			GUSE+=" cxx -openmp" #489798
-			GUSE+=" -fortran" #589672, needs syscalls
 			MULTILIB_USE="yes" #407275
 			WITH_DEF_HEADERS="no"
 			;;
@@ -334,10 +335,6 @@
 			;;
 	esac
 
-	# Target-specific defaults (workarounds for upstream bugs). User
-	# can override them by passing 'USE=foo crossdev ...'. Useful when
-	# one wants to fix upstream bugs.
-
 	local sanitizer_support=no
 	# Whitelist asan on explicitly supported arches for linux.
 	# Broken examples:
@@ -383,37 +380,6 @@
 	if [[ $vtv_support = "no" ]]; then
 		GUSE+=" -vtv"
 	fi
-
-	local pie_support=yes
-	# Blacklist rare targets that:
-	# 1. don't support -fPIC in compiler
-	# 2. have -fPIE broken
-	case ${CTARGET} in
-		# [1.]: no -fPIC flag support:
-		#       check as '$CC -fPIC -c -x c - </dev/null'
-		avr*|mmix*) pie_support=no;;
-		# [2.] mingw32 startup code is broken: bug #644930
-		#      at least on i686-w64-mingw32 and x86_64-w64-mingw32
-		mingw*|*-mingw*) pie_support=no;;
-	esac
-	if [[ $pie_support = "no" ]]; then
-		# pie is >=gcc-6, nopie is <gcc-6
-		GUSE+=" -pie nopie"
-	fi
-
-	local ssp_support=yes
-	# Blacklist rare targets that:
-	# 1. don't support -fstack-protector in compiler
-	# 2. have -fstack-protector broken
-	case ${CTARGET} in
-		# [1.]: no -fstack-protector flag support:
-		#       check as '$CC -fstack-protector -c -x c - </dev/null'
-		alpha*|avr*|hppa*|ia64*|mmix*|nios2*) ssp_support=no;;
-	esac
-	if [[ $ssp_support = "no" ]]; then
-		# ssp is >=gcc-6, nossp is <gcc-6
-		GUSE+=" -ssp nossp"
-	fi
 }
 
 parse_repo_config() {
@@ -536,10 +502,10 @@
 	# clean out known toolchain files (binutils/gcc)
 	for f in \
 		addr2line ar as c++filt dlltool dllwrap dwp embedspu \
-		gcc-{ar,nm,ranlib} gccbug gcov-{dump,tool} gprof ld nm \
-		objcopy objdump ranlib readelf size strings strip windmc windres
+		gcc-{ar,nm,ranlib} gccbug gprof ld nm objcopy objdump \
+		ranlib readelf size strings strip windmc windres
 	do
-		rm -f "${EPREFIX}"/usr/bin/${CTARGET}-${f}
+		rm -f "${EPREFIX}"/usr/bin/${CTARGET}-${f} "${EPREFIX}"/usr/${CTARGET}/bin/${f}
 	done
 	rm -f "${EPREFIX}"/usr/${CTARGET}/{sys-include,usr}
 	rmdir "${EPREFIX}"/usr/${CTARGET}/{include/asm,include} 2>/dev/null
@@ -549,6 +515,7 @@
 	# clean out files from crossdev itself
 	[[ -e ${EPREFIX}/var/db/pkg/cross-${CTARGET} ]] && rmdir "${EPREFIX}"/var/db/pkg/cross-${CTARGET}
 	rm -f "${EPREFIX}"/usr/bin/${CTARGET}-{emerge,fix-root,pkg-config} "${EPREFIX}"/usr/bin/emerge-${CTARGET}
+	[[ -h ${EPREFIX}/usr/${CTARGET}/lib/ldscripts ]] && rm "${EPREFIX}"/usr/${CTARGET}/lib/ldscripts
 
 	for f in make.{conf,globals,profile} ; do
 		f="${EPREFIX}/usr/${CTARGET}/etc/${f}"
@@ -819,7 +786,7 @@
 setup_portage_vars
 if [[ -z ${CROSSDEV_OVERLAY} ]] ; then
 	eerror "You need to specify an output overlay.  Please use --ov-output, or consult"
-	eerror "https://wiki.gentoo.org/wiki/Custom_repository for more details."
+	eerror "https://wiki.gentoo.org/wiki/Overlay/Local_overlay for more details."
 	exit 1
 fi
 
@@ -923,7 +890,6 @@
 einfo "Target Portage ARCH:   ${TARCH}"
 einfo "Target System:         ${CTARGET}"
 einfo "Stage:                 ${STAGE} (${STAGE_DISP[${STAGE}]})"
-einfo "USE=multilib:          ${MULTILIB_USE}"
 [[ ${DEFAULT_ABI} != "${MULTILIB_ABIS}" ]] && def_out=" (default: ${DEFAULT_ABI})" || def_out=
 einfo "ABIs:                  ${MULTILIB_ABIS}${def_out}"
 echo
@@ -1124,8 +1090,8 @@
 	case ${CTARGET} in
 		# avr requires multilib, that provides
 		# libgcc for all sub-architectures #378387
-		avr*)   set_use_force ${pkg} multilib
-			set_use_mask ${pkg} -multilib;;
+		avr*)   set_use_force ${pkg} multilib -pie;
+			set_use_mask ${pkg} -multilib pie;;
 		*-newlib|*-elf|*-eabi)
 			set_use_force ${pkg} multilib;
 			set_use_mask ${pkg} -multilib;;
@@ -1249,20 +1215,6 @@
 xmkdir -p "${EPREFIX}"/usr/${CTARGET}
 emerge-wrapper --target ${CTARGET} --init || exit 1
 
-#############################################################
-### Create directories usually created by sys-apps/baselayout
-###
-### Why we do that at all:
-### For multilib-aware targets (ppc64, s390x, sparc64, x86_64) Gentoo
-### normally uses libdir=lib64.
-### For crossdev it means /lib and /usr/lib does not get created at all
-### but gcc relies on their presence by refering to =/lib64 as
-### =/usr/lib/../lib64 when builds itself (see https://bugs.gentoo.org/652724)
-###
-### Thus we create non-symlinked layout early.
-xmkdir -p "${EPREFIX}"/usr/${CTARGET}/lib
-xmkdir -p "${EPREFIX}"/usr/${CTARGET}/usr/lib
-
 #################
 emerged_with_use() {
 	local pkg=$1 use=$2
@@ -1409,6 +1361,16 @@
 		USE="${GUSE} ${USE} ${GUSE_DISABLE_STAGE_2}" \
 			doemerge ${GPKG} ${GPKG}-stage2
 	fi
+
+	# this is to make sure that avr linker can find its a**, er, ldscripts
+	if [[ ${MAKE_SYMLINK} == "yes" ]] ; then
+		case ${CTARGET} in
+			avr*)   ( ! [[ -h ${EPREFIX}/usr/${CTARGET}/lib/ldscripts ]] && [[ -d ${EPREFIX}/usr/${CTARGET}/lib ]] ) && \
+					ln -s ${EPREFIX}/usr/${HCHOST}/${CTARGET}/lib/ldscripts ${EPREFIX}/usr/${CTARGET}/lib/
+				;;
+			*)      ;;
+		esac
+	fi
 fi
 
 # all the extra things (like debuggers)
--- a/wrappers/cross-emerge	2018-05-12 19:18:47.326666666 +0000
+++ b/wrappers/cross-emerge	2018-05-12 19:18:25.336666666 +0000
@@ -10,7 +10,7 @@
 export CHOST
 
 EPREFIX="@GENTOO_PORTAGE_EPREFIX@"
-if [ "${EPREFIX}" = "@"GENTOO_PORTAGE_EPREFIX"@" ] ; then
+if [[ ${EPREFIX} == "@"GENTOO_PORTAGE_EPREFIX"@" ]] ; then
 	EPREFIX=""
 fi
 
--- a/wrappers/emerge-wrapper	2018-05-12 19:18:47.326666666 +0000
+++ b/wrappers/emerge-wrapper	2018-05-12 19:18:25.336666666 +0000
@@ -38,11 +38,7 @@
 
 	cp -a "${PREFIX}"/share/crossdev/etc ${SYSROOT}/     || return 1
 
-	local confs=(
-		${SYSROOT}/etc/portage/make.conf
-		${SYSROOT}/etc/portage/profile/make.defaults
-		${SYSROOT}/etc/portage/profile/use.force
-	)
+	local conf=${SYSROOT}/etc/portage/make.conf
 
 	# Re-use existing CHOST->portage ARCH mapping code
 	ARCH=$(
@@ -59,32 +55,19 @@
 	*musl*)   LIBC=musl ;;
 	*cygwin*) LIBC=Cygwin ;;
 	*mingw*)  LIBC=mingw ;;
+	riscv*-*-elf*) LIBC=newlib ;;
 	*)        emit_setup_warning "No LIBC is known for this target." ;;
 	esac
 
-	KERNEL="__KERNEL__"
-	case ${CHOST} in
-	*linux*)  KERNEL=linux ;;
-	*)        emit_setup_warning "No KERNEL is known for this target." ;;
-	esac
-	if [[ -n ${KERNEL} ]]; then
-		USE_FORCE_KERNEL="kernel_${KERNEL}"
-	else
-		USE_FORCE_KERNEL=""
-	fi
-
 	sed -i \
 		-e "s:__LIBC__:${LIBC}:g" \
 		-e "s:__ARCH__:${ARCH}:g" \
-		-e "s:__KERNEL__:${KERNEL}:g" \
-		-e "s:__USE_FORCE_KERNEL__:${USE_FORCE_KERNEL}:g" \
 		-e "s:__CHOST__:${CHOST}:g" \
 		-e "s:__CBUILD__:${CBUILD}:g" \
-		"${confs[@]}"
+		"${conf}"
 
 	# Try to figure out the libc version & os headers to avoid installing over top of it.
 	# XXX: Would be nice to use virtual/libc and virtual/os-headers here ...
-	# TODO: this does not work as crossdev calls --init before any packages are installed
 	cd "${SYSROOT}/etc/portage"
 	mkdir -p profile
 	qlist -ICv "cross-${CHOST}/" | \
--- a/wrappers/etc/portage/make.conf	2018-05-12 19:18:47.326666666 +0000
+++ b/wrappers/etc/portage/make.conf	2018-05-12 19:18:25.336666666 +0000
@@ -1,15 +1,12 @@
-# Note: profile variables are set/overridden in profile/ files:
-# etc/portage/profile/use.force (overrides kernel_* USE variables)
-# etc/portage/profile/make.defaults (overrides ARCH, KERNEL, ELIBC variables)
-
 CHOST=__CHOST__
 CBUILD=__CBUILD__
+ARCH=__ARCH__
 
-HOSTCC=${CBUILD}-gcc
+HOSTCC=__CBUILD__-gcc
 
 ROOT=@GENTOO_PORTAGE_EPREFIX@/usr/${CHOST}/
 
-ACCEPT_KEYWORDS="${ARCH} ~${ARCH}"
+ACCEPT_KEYWORDS="__ARCH__ ~__ARCH__"
 
 USE="${ARCH} -pam"
 
@@ -21,5 +18,7 @@
 PKGDIR=${ROOT}packages/
 PORTAGE_TMPDIR=${ROOT}tmp/
 
+ELIBC="__LIBC__"
+
 PKG_CONFIG_PATH="${ROOT}usr/lib/pkgconfig/"
 #PORTDIR_OVERLAY="/usr/portage/local/"
--- a/wrappers/etc/portage/profile/make.defaults	2018-05-12 19:18:47.326666666 +0000
+++ b/wrappers/etc/portage/profile/make.defaults	1970-01-01 00:00:00.000000000 +0000
@@ -1,3 +0,0 @@
-ARCH="__ARCH__"
-KERNEL="-linux __KERNEL__"
-ELIBC="__LIBC__"
--- a/wrappers/etc/portage/profile/use.force	2018-05-12 19:18:47.326666666 +0000
+++ b/wrappers/etc/portage/profile/use.force	1970-01-01 00:00:00.000000000 +0000
@@ -1,2 +0,0 @@
--kernel_linux
-__USE_FORCE_KERNEL__
