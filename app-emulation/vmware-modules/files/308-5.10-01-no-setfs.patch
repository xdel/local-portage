commit 98a9df50401370a459afcc028ab5b435a5357bdf
Author: Michal Kubecek <mkubecek@suse.cz>
Date:   Sat Oct 17 03:11:10 2020 +0200

    vmmon: avoid set_fs() in HostIF_SemaphoreWait() and HostIF_SemaphoreSignal()
    
    The set_fs() function was dropped on x86_64 architecture by commit
    47058bb54b57 ("x86: remove address space overrides using set_fs()") in
    5.10-rc1. In HostIF_SemaphoreWait() it is used to allow calling read() file
    op on a kernel pointer, in HostIF_SemaphoreSignal() to allow calling
    write() file op on a kernel pointer. This is only the case for pre-5.8
    kernels as we need to use kernel_read() and kernel_write() helpers on 5.8
    and newer anyway.
    
    Use kernel_read() and kernel_write() always, like Workstation 16.0.0 does,
    so that we no longer need the set_fs(KERNEL_DS) trick. Make the code of
    both functions look exactly like in Workstation 16.0.0 to make future
    backports easier.

diff --git a/vmmon-only/linux/hostif.c b/vmmon-only/linux/hostif.c
index ff6296d..36a4f1e 100644
--- a/vmmon-only/linux/hostif.c
+++ b/vmmon-only/linux/hostif.c
@@ -2519,40 +2519,30 @@
                      uint64 *args)   // IN:
 {
    struct file *file;
-   mm_segment_t old_fs;
    int res;
    int waitFD = args[0];
    int timeoutms = args[2];
    uint64 value;
+   struct poll_wqueues table;
+   unsigned int mask;
 
    file = vmware_fget(waitFD);
    if (file == NULL) {
       return MX_WAITERROR;
    }
 
-   old_fs = get_fs();
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 1, 0)
-   set_fs(KERNEL_DS);
-#else
-   set_fs(get_ds());
-#endif
-
-   {
-      struct poll_wqueues table;
-      unsigned int mask;
-      
-      poll_initwait(&table);
-      current->state = TASK_INTERRUPTIBLE;
-      mask = compat_vfs_poll(file, &table.pt);
-      if (!(mask & (POLLIN | POLLERR | POLLHUP))) {
-         vm->vmhost->vcpuSemaTask[vcpuid] = current;
-         schedule_timeout(timeoutms * HZ / 1000);  // convert to Hz
-         vm->vmhost->vcpuSemaTask[vcpuid] = NULL;
-      }
-      current->state = TASK_RUNNING;
-      poll_freewait(&table);
+   poll_initwait(&table);
+   current->state = TASK_INTERRUPTIBLE;
+   mask = compat_vfs_poll(file, &table.pt);
+   if (!(mask & (POLLIN | POLLERR | POLLHUP))) {
+      vm->vmhost->vcpuSemaTask[vcpuid] = current;
+      schedule_timeout(timeoutms * HZ / 1000);  // convert to Hz
+      vm->vmhost->vcpuSemaTask[vcpuid] = NULL;
    }
 
+   current->state = TASK_RUNNING;
+   poll_freewait(&table);
+
    /*
     * Userland only writes in multiples of sizeof(uint64). This will allow
     * the code to happily deal with a pipe or an eventfd. We only care about
@@ -2560,9 +2550,9 @@
     */
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 14, 0)
-   res = kernel_read(file, (char *) &value, sizeof value, &file->f_pos);
+   res = kernel_read(file, file->f_pos, (char *)&value, sizeof value);
 #else
-   res = file->f_op->read(file, (char *) &value, sizeof value, &file->f_pos);
+   res = kernel_read(file, &value, sizeof value, &file->f_pos);
 #endif
 
    if (res == sizeof value) {
@@ -2573,7 +2563,6 @@
       }
    }
 
-   set_fs(old_fs);
    fput(file);
 
    /*
@@ -2657,7 +2646,6 @@
 HostIF_SemaphoreSignal(uint64 *args)  // IN:
 {
    struct file *file;
-   mm_segment_t old_fs;
    int res;
    int signalFD = args[1];
    uint64 value = 1;  // make an eventfd happy should it be there
@@ -2667,13 +2655,6 @@
       return MX_WAITERROR;
    }
 
-   old_fs = get_fs();
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 1, 0)
-   set_fs(KERNEL_DS);
-#else
-   set_fs(get_ds());
-#endif
-
    /*
     * Always write sizeof(uint64) bytes. This works fine for eventfd and
     * pipes. The data written is formatted to make an eventfd happy should
@@ -2681,16 +2662,15 @@
     */
 
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 14, 0)
-   res = kernel_write(file, (char *) &value, sizeof value, &file->f_pos);
+   res = kernel_write(file, (char *)&value, sizeof value, file->f_pos);
 #else
-   res = file->f_op->write(file, (char *) &value, sizeof value, &file->f_pos);
+   res = kernel_write(file, &value, sizeof value, &file->f_pos);
 #endif
 
    if (res == sizeof value) {
       res = MX_WAITNORMAL;
    }
 
-   set_fs(old_fs);
    fput(file);
 
    /*
