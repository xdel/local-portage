commit 8bfd4ebfa24d13f6f6f24024061ff7007fb5c692
Author: Michal Kubecek <mkubecek@suse.cz>
Date:   Thu Sep 19 12:20:20 2019 +0200

    vmnet: handle switch of skb_frag_t to bio_vec
    
    The switch from custom skb_frag_t implementation to bio_vec in v5.4-rc1 is
    mostly transparent for modules which use accessor for skb_frag_t members.
    Unfortunately many users access the members directly and function
    VNetCsumCopyDatagram() in vmnet is one of those.
    
    Use accessors everywhere so that vmnet code is compatible with kernel 5.4
    and newer. Use "compat_" prefix to avoid clashes with backports adding the
    accessors to older codebase.

diff --git a/vmnet-only/userif.c b/vmnet-only/userif.c
index eecd4f8..24b02c9 100644
--- a/vmnet-only/userif.c
+++ b/vmnet-only/userif.c
@@ -84,16 +84,31 @@
 extern unsigned int  vnet_max_qlen;
 
 #if COMPAT_LINUX_VERSION_CHECK_LT(3, 2, 0)
-#   define compat_kmap(page) kmap(page)
-#   define compat_kunmap(page) kunmap(page)
-#elif COMPAT_LINUX_VERSION_CHECK_LT(5, 4, 0)
-#   define compat_kmap(page) kmap((page).p)
-#   define compat_kunmap(page) kunmap((page).p)
+#   define compat_kmap_frag(frag) kmap((frag)->page)
+#   define compat_kunmap_frag(page) kunmap((frag)->page)
 #else
-#   define compat_kmap(page) kmap(page)
-#   define compat_kunmap(page) kunmap(page)
+#   define compat_kmap_frag(frag) kmap(skb_frag_page(frag))
+#   define compat_kunmap_frag(frag) kunmap(skb_frag_page(frag))
 #endif
 
+static unsigned int compat_skb_frag_size(const skb_frag_t *frag)
+{
+#if COMPAT_LINUX_VERSION_CHECK_LT(3, 2, 0)
+       return frag->size;
+#else
+       return skb_frag_size(frag);
+#endif
+}
+
+static unsigned int compat_skb_frag_off(const skb_frag_t *frag)
+{
+#if COMPAT_LINUX_VERSION_CHECK_LT(5, 4, 0)
+       return frag->page_offset;
+#else
+       return skb_frag_off(frag);
+#endif
+}
+
 /*
  *-----------------------------------------------------------------------------
  *
@@ -601,35 +616,21 @@
    for (frag = skb_shinfo(skb)->frags;
 	frag != skb_shinfo(skb)->frags + skb_shinfo(skb)->nr_frags;
 	frag++) {
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
-      if (frag->size > 0) {
-#else
-      if (skb_frag_size(frag) > 0) {
-#endif
+      if (compat_skb_frag_size(frag) > 0) {
 	 unsigned int tmpCsum;
 	 const void *vaddr;
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
-	 vaddr = compat_kmap(frag->page);
-	 tmpCsum = csum_and_copy_to_user(vaddr + frag->page_offset,
-					 curr, frag->size, 0, &err);
-	 compat_kunmap(frag->page);
-#else
-	 vaddr = compat_kmap(skb_frag_page(frag));
-	 tmpCsum = csum_and_copy_to_user(vaddr + skb_frag_off(frag),
-					 curr, skb_frag_size(frag), 0, &err);
-	 compat_kunmap(skb_frag_page(frag));
-#endif
+        vaddr = compat_kmap_frag(frag);
+        tmpCsum = csum_and_copy_to_user(vaddr + compat_skb_frag_off(frag),
+                                        curr, compat_skb_frag_size(frag), 0,
+                                        &err);
+        compat_kunmap_frag(frag);
 
 	 if (err) {
 	    return err;
 	 }
 	 csum = csum_block_add(csum, tmpCsum, curr - buf);
-#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 4, 0)
-	 curr += frag->size;
-#else
-	 curr += skb_frag_size(frag);
-#endif
+	 curr += compat_skb_frag_size(frag);
       }
    }
 
