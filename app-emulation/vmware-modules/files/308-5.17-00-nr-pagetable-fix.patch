commit 0a82f78d6f8bb950901e3a319155b6b90c3c2023
Author: Michal Kubecek <mkubecek@suse.cz>
Date:   Tue Jan 11 16:47:56 2022 +0100

    vmmon: update page accounting after NR_PAGETABLE moving from zone to node (#117)
    
    Items in page accounting stats keep moving around. Mainline commit
    f0c0c115fb81 ("mm: memcontrol: account pagetables per node") in 5.11-rc1
    moved NR_PAGES from zone to node which nobody noticed until an aggresively
    optimizing compiler optimized an access to vm_zone_stat[NR_PAGETABLE]
    (which is now always out of bounds) to an unconditional panic.
    
    Add another ifdef branch (based on version check as that is what the rest
    of the code already does) to handle kernels >= 5.11.
    
    To make things worse, this commit was also backported into RHEL but,
    unlike other page accounting backports, it was with RHEL 8.5 rather than
    RHEL 8.4. Add a new helper macro and subcondition.

diff --git a/vmmon-only/linux/hostif.c b/vmmon-only/linux/hostif.c
index e54eec0..f1e5f45 100644
--- a/vmmon-only/linux/hostif.c
+++ b/vmmon-only/linux/hostif.c
@@ -116,11 +116,22 @@
 	#if RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(8, 4)
 		#define __RHEL_PAGE_ACCT_HACK
 	#endif
+	#if RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(8, 5)
+		#define __RHEL85_PAGE_ACCT_HACK
+	#endif
 #endif
 
-#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 14, 0)
-#   define global_zone_page_state global_page_state
+static unsigned long get_nr_pagetable(void)
+{
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 11, 0) || \
+    defined(__RHEL85_PAGE_ACCT_HACK)
+   return global_node_page_state(NR_PAGETABLE);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 14, 0)
+   return global_zone_page_state(NR_PAGETABLE);
+#else
+   return global_page_state(NR_PAGETABLE);
 #endif
+}
 
 static unsigned long get_nr_slab_unreclaimable(void)
 {
@@ -1681,7 +1692,7 @@ HostIF_EstimateLockedPageLimit(const VMDriver* vm,                // IN
    unsigned int reservedPages = MEMDEFAULTS_MIN_HOST_PAGES;
    unsigned int hugePages = (vm == NULL) ? 0 :
       BYTES_2_PAGES(vm->memInfo.hugePageBytes);
-   unsigned int lockedPages = global_zone_page_state(NR_PAGETABLE) +
+   unsigned int lockedPages = get_nr_pagetable() +
                               get_nr_slab_unreclaimable() +
                               get_nr_unevictable() +
                               hugePages + reservedPages;
