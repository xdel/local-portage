commit 57a50383ed867c322123a074b57a62dcd168bb89
Author: Michal Kubecek <mkubecek@suse.cz>
Date:   Wed Nov 18 21:56:36 2020 +0100

    vmmon: avoid kernel writes to eventfd
    
    Starting with mainline commit 4d03e3cc5982 ("fs: don't allow kernel reads
    and writes without iter ops") in 5.10-rc1, kernel writes are only allowed
    for files providing ->write_iter() callback which eventfd does not.
    
    As an attempt to address this issue on kernel side by providing
    ->write_iter() callback to eventfd was met with a pushback and it is
    unlikely to be accepted any time soon, let's use a specific eventfd
    interface eventfd_signal() instead. However, as the comments in
    HostIF_SemaphoreSignal() indicate that the file descriptor may also be
    a pipe (without telling when), let's keep kernel_write() as a fallback in
    case the file descriptor is not eventfd.

Index: work/vmmon-only/linux/hostif.c
===================================================================
--- work.orig/vmmon-only/linux/hostif.c
+++ work/vmmon-only/linux/hostif.c
@@ -81,6 +81,7 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
 #include <linux/taskstats_kern.h> // For linux/sched/signal.h without version check
 #endif
+#include <linux/eventfd.h>
 
 #include "vmware.h"
 #include "x86apic.h"
@@ -2658,6 +2659,7 @@ HostIF_SemaphoreForceWakeup(VMDriver *vm
 int
 HostIF_SemaphoreSignal(uint64 *args)  // IN:
 {
+   struct eventfd_ctx *eventfd;
    struct file *file;
    int res;
    int signalFD = args[1];
@@ -2669,6 +2671,17 @@ HostIF_SemaphoreSignal(uint64 *args)  //
    }
 
    /*
+    * If it's eventfd, use specific eventfd interface as kernel writes
+    * to eventfd may not be allowed in kernel 5.10 and later.
+    */
+   eventfd = eventfd_ctx_fileget(file);
+   if (!IS_ERR(eventfd)) {
+      eventfd_signal(eventfd, 1);
+      fput(file);
+      return MX_WAITNORMAL;
+   }
+
+   /*
     * Always write sizeof(uint64) bytes. This works fine for eventfd and
     * pipes. The data written is formatted to make an eventfd happy should
     * it be present.
