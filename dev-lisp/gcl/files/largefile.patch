commit 598e5a7f22abde964cb40a9a3d7207602239edc9
Author: Petr Zima <zima@matfyz.cz>
Date:   Thu Apr 2 12:28:32 2020 +0200

    largefile.patch

diff --git a/gcl/configure b/gcl/configure
index f45db39ed..ff3ffe880 100755
--- a/gcl/configure
+++ b/gcl/configure
@@ -759,6 +759,7 @@ enable_static
 enable_pic
 enable_gprof
 enable_dynsysgmp
+enable_largefile
 with_x
 enable_xdr
 enable_immfix
@@ -1433,6 +1434,7 @@ Optional Features:
   --enable-fastimmfix=XXXX will reject low immediate fixnums unless 2^XXX can be attained
   --enable-ansi builds a large gcl aiming for ansi compliance
   --enable-japi=yes will compile in support for the JAPI graphical interface if present on your system
+  --disable-largefile     omit support for large files
   --enable-readline    enables command line completion via the readline library
   --enable-tcltk will try to build gcl-tk
   --enable-tkconfig=XXXX will force the use of a TK_CONFIG_PREFIX=XXXXX as place to look for tkConfig.sh and tclConfig.sh
@@ -4846,6 +4848,207 @@ ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $
 ac_compiler_gnu=$ac_cv_c_compiler_gnu
 
 
+# Check whether --enable-largefile was given.
+if test "${enable_largefile+set}" = set; then :
+  enableval=$enable_largefile;
+fi
+
+if test "$enable_largefile" != no; then
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for special C compiler options needed for large files" >&5
+$as_echo_n "checking for special C compiler options needed for large files... " >&6; }
+if ${ac_cv_sys_largefile_CC+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  ac_cv_sys_largefile_CC=no
+     if test "$GCC" != yes; then
+       ac_save_CC=$CC
+       while :; do
+	 # IRIX 6.2 and later do not support large files by default,
+	 # so use the C compiler's -n32 option if that helps.
+	 cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <sys/types.h>
+ /* Check that off_t can represent 2**63 - 1 correctly.
+    We can't simply define LARGE_OFF_T to be 9223372036854775807,
+    since some C++ compilers masquerading as C compilers
+    incorrectly reject 9223372036854775807.  */
+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
+		       && LARGE_OFF_T % 2147483647 == 1)
+		      ? 1 : -1];
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+	 if ac_fn_c_try_compile "$LINENO"; then :
+  break
+fi
+rm -f core conftest.err conftest.$ac_objext
+	 CC="$CC -n32"
+	 if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_sys_largefile_CC=' -n32'; break
+fi
+rm -f core conftest.err conftest.$ac_objext
+	 break
+       done
+       CC=$ac_save_CC
+       rm -f conftest.$ac_ext
+    fi
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_sys_largefile_CC" >&5
+$as_echo "$ac_cv_sys_largefile_CC" >&6; }
+  if test "$ac_cv_sys_largefile_CC" != no; then
+    CC=$CC$ac_cv_sys_largefile_CC
+  fi
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for _FILE_OFFSET_BITS value needed for large files" >&5
+$as_echo_n "checking for _FILE_OFFSET_BITS value needed for large files... " >&6; }
+if ${ac_cv_sys_file_offset_bits+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  while :; do
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <sys/types.h>
+ /* Check that off_t can represent 2**63 - 1 correctly.
+    We can't simply define LARGE_OFF_T to be 9223372036854775807,
+    since some C++ compilers masquerading as C compilers
+    incorrectly reject 9223372036854775807.  */
+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
+		       && LARGE_OFF_T % 2147483647 == 1)
+		      ? 1 : -1];
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_sys_file_offset_bits=no; break
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#define _FILE_OFFSET_BITS 64
+#include <sys/types.h>
+ /* Check that off_t can represent 2**63 - 1 correctly.
+    We can't simply define LARGE_OFF_T to be 9223372036854775807,
+    since some C++ compilers masquerading as C compilers
+    incorrectly reject 9223372036854775807.  */
+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
+		       && LARGE_OFF_T % 2147483647 == 1)
+		      ? 1 : -1];
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_sys_file_offset_bits=64; break
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+  ac_cv_sys_file_offset_bits=unknown
+  break
+done
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_sys_file_offset_bits" >&5
+$as_echo "$ac_cv_sys_file_offset_bits" >&6; }
+case $ac_cv_sys_file_offset_bits in #(
+  no | unknown) ;;
+  *)
+cat >>confdefs.h <<_ACEOF
+#define _FILE_OFFSET_BITS $ac_cv_sys_file_offset_bits
+_ACEOF
+;;
+esac
+rm -rf conftest*
+  if test $ac_cv_sys_file_offset_bits = unknown; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking for _LARGE_FILES value needed for large files" >&5
+$as_echo_n "checking for _LARGE_FILES value needed for large files... " >&6; }
+if ${ac_cv_sys_large_files+:} false; then :
+  $as_echo_n "(cached) " >&6
+else
+  while :; do
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#include <sys/types.h>
+ /* Check that off_t can represent 2**63 - 1 correctly.
+    We can't simply define LARGE_OFF_T to be 9223372036854775807,
+    since some C++ compilers masquerading as C compilers
+    incorrectly reject 9223372036854775807.  */
+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
+		       && LARGE_OFF_T % 2147483647 == 1)
+		      ? 1 : -1];
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_sys_large_files=no; break
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext
+/* end confdefs.h.  */
+#define _LARGE_FILES 1
+#include <sys/types.h>
+ /* Check that off_t can represent 2**63 - 1 correctly.
+    We can't simply define LARGE_OFF_T to be 9223372036854775807,
+    since some C++ compilers masquerading as C compilers
+    incorrectly reject 9223372036854775807.  */
+#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))
+  int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721
+		       && LARGE_OFF_T % 2147483647 == 1)
+		      ? 1 : -1];
+int
+main ()
+{
+
+  ;
+  return 0;
+}
+_ACEOF
+if ac_fn_c_try_compile "$LINENO"; then :
+  ac_cv_sys_large_files=1; break
+fi
+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext
+  ac_cv_sys_large_files=unknown
+  break
+done
+fi
+{ $as_echo "$as_me:${as_lineno-$LINENO}: result: $ac_cv_sys_large_files" >&5
+$as_echo "$ac_cv_sys_large_files" >&6; }
+case $ac_cv_sys_large_files in #(
+  no | unknown) ;;
+  *)
+cat >>confdefs.h <<_ACEOF
+#define _LARGE_FILES $ac_cv_sys_large_files
+_ACEOF
+;;
+esac
+rm -rf conftest*
+  fi
+
+
+fi
+
+
 GCL_CC=`basename $CC`
 if echo $GCL_CC |grep gcc |grep -q win; then
     GCL_CC=gcc
diff --git a/gcl/configure.in b/gcl/configure.in
index d65aa8268..606437112 100644
--- a/gcl/configure.in
+++ b/gcl/configure.in
@@ -181,6 +181,7 @@ AC_USE_SYSTEM_EXTENSIONS
 AC_PROG_CC
 AC_PROG_CPP
 AC_SUBST(CC)
+AC_SYS_LARGEFILE
 GCL_CC=`basename $CC`
 if echo $GCL_CC |grep gcc |grep -q win; then
     GCL_CC=gcc
diff --git a/gcl/h/linux.h b/gcl/h/linux.h
index 3c94d8dc3..4bb8f80c6 100644
--- a/gcl/h/linux.h
+++ b/gcl/h/linux.h
@@ -12,13 +12,13 @@
 #include <link.h>
 #define SEEK_TO_END_OFILE(fp)\
   do { \
-	long offset = 0, endofelf; int j; \
+	off_t offset = 0, endofelf; int j; \
 	ElfW(Ehdr) eheader; ElfW(Shdr) shdr; \
-        fseek(fp, 0, SEEK_SET); \
+        fseeko(fp, 0, SEEK_SET); \
         massert(1==fread(&eheader, sizeof(eheader), 1, fp));	      \
   /* in case the headers themselves come AFTER the actual sections */ \
 	endofelf=offset = eheader.e_shoff+ eheader.e_shentsize *eheader.e_shnum;\
-        fseek(fp, eheader.e_shoff, SEEK_SET); \
+        fseeko(fp, eheader.e_shoff, SEEK_SET); \
 	if ( eheader.e_shentsize != sizeof(ElfW(Shdr)) ) \
 	  { FEerror("Bad ELF section header size",0); } \
         for ( j = 0; j < eheader.e_shnum; j++ ) \
@@ -26,7 +26,7 @@
             if ( (shdr.sh_offset > offset) && (shdr.sh_type != SHT_NOBITS) ) \
 	      { offset = shdr.sh_offset; endofelf = offset+shdr.sh_size; } \
 	  } \
-	if ( fseek(fp, endofelf, SEEK_SET) ) \
+	if ( fseeko(fp, endofelf, SEEK_SET) ) \
 	    FEerror("Bad ELF file",0); \
       } while(0)
 
diff --git a/gcl/h/mp.h b/gcl/h/mp.h
index c4cfb5fae..7f18e352b 100755
--- a/gcl/h/mp.h
+++ b/gcl/h/mp.h
@@ -33,6 +33,22 @@ typedef struct
             
 #define SI_TO_MP(x, temp) (mpz_set_si(MP(temp),(x)), MP(temp))
             
+#define C_INT_TO_OBJ(x) ({					\
+  object temp = big_fixnum1;					\
+  if (x >= MOST_NEGATIVE_FIX && x <= MOST_POSITIVE_FIX)	\
+    temp = make_fixnum(x);					\
+  else if (sizeof(x) <= sizeof(long))				\
+    mpz_set_si(MP(big_fixnum1), x);				\
+  else if (x < 0) {						\
+    __typeof__(x) y = -x;					\
+    mpz_import(MP(big_fixnum2), 1U, 1, sizeof(x), 0, 0U, &y);	\
+    mpz_neg(MP(big_fixnum1), MP(big_fixnum2));			\
+  } else {							\
+    __typeof__(x) y = x;					\
+    mpz_import(MP(big_fixnum1), 1U, 1, sizeof(x), 0, 0U, &y);	\
+  }								\
+  temp;							\
+})
 
 #define INTEGER_TO_MP(x, temp ) \
   (type_of(x) == t_bignum ? MP(x) : SI_TO_MP(fix(x), temp))
@@ -108,6 +124,20 @@ GEN subss();
 
 #define SI_TO_MP(x,ignore) stoi(x)
 
+#define C_INT_TO_OBJ(x) ({					\
+  object temp = big_fixnum1;					\
+  if (x >= MOST_NEGATIVE_FIX && x <= MOST_POSITIVE_FIX)	\
+    temp = make_fixnum(x);					\
+  else if (sizeof(x) <= sizeof(long))				\
+    MP(big_fixnum1) = stoi(x);					\
+  else if (x < 0) {						\
+    __typeof__(x) y = -x;					\
+    MP(big_fixnum1) = uutoineg((y) >> (sizeof(ulong) * 8), (y) & (ulong)-1); \
+  } else							\
+    MP(big_fixnum1) = uutoi((x) >> (sizeof(ulong) * 8), (x) & (ulong)-1); \
+  temp;							\
+})
+
 #define INT_FLAG 0x1010000
 
 #define MP_ALLOCATED(x) (x)->big.big_length
diff --git a/gcl/h/protoize.h b/gcl/h/protoize.h
index ba12a5ddd..b66a920c7 100644
--- a/gcl/h/protoize.h
+++ b/gcl/h/protoize.h
@@ -512,7 +512,7 @@ typedef void (*funcvoid)(void);
 /* unixfsys.c:329:OF */ extern bool file_exists (object file); /* (file) object file; */
 /* unixfsys.c:359:OF */ extern FILE *backup_fopen (char *filename, char *option); /* (filename, option) char *filename; char *option; */
 /* unixfsys.c:359:OF */ extern FILE *fopen_not_dir (char *filename, char *option); /* (filename, option) char *filename; char *option; */
-/* unixfsys.c:372:OF */ extern int file_len (FILE *fp); /* (fp) FILE *fp; */
+/* unixfsys.c:372:OF */ extern off_t file_len (FILE *fp); /* (fp) FILE *fp; */
 /* unixfsys.c:382:OF */ extern object truename (object); /* () */
 /* unixfsys.c:382:OF */ extern void Ltruename (void); /* () */
 /* unixfsys.c:418:OF */ extern object fSsetenv (object variable, object value); /* (variable, value) object variable; object value; */
@@ -738,11 +738,11 @@ edit_double(int, double, int *, char *, int *);
 void
 sethash(object,object,object);
 
-int
+off_t
 file_position(object);
 
 int
-file_position_set(object, int);
+file_position_set(object, off_t);
 
 void
 princ_str(char *s, object);
diff --git a/gcl/o/fasdump.c b/gcl/o/fasdump.c
index d73c016e3..00043db6f 100755
--- a/gcl/o/fasdump.c
+++ b/gcl/o/fasdump.c
@@ -23,6 +23,7 @@
 #ifndef FAT_STRING
 #include "include.h"
 #endif
+#include "num_include.h"
 
 static void
 clrhash(object);
@@ -599,7 +600,9 @@ DEFUN_NEW("OPEN-FASD",object,fSopen_fasd,SI,4,4,NONE,OO,OO,OO,OO,(object stream,
     fd->eof=eof;
     fd->index=small_fixnum(0);
     fd->package=symbol_value(sLApackageA);
-    fd->filepos = make_fixnum(ftell(stream->sm.sm_fp));
+    {off_t i = ftello(stream->sm.sm_fp);
+     fd->filepos = C_INT_TO_OBJ(i);
+    }
     
     SETUP_FASD_IN(fd);
     if (direction==sKoutput){
@@ -647,13 +650,13 @@ DEFUN_NEW("CLOSE-FASD",object,fSclose_fasd,SI,1,1,NONE,OO,OO,OO,OO,(object ar),"
        {clrhash(fd->table);
 	SETUP_FASD_IN(fd);
 	PUT_OP(d_end_of_file);
-	{int i = ftell(fd->stream->sm.sm_fp);
+	{off_t i = ftello(fd->stream->sm.sm_fp);
 	 if(type_of(fd->filepos) == t_fixnum)
-	   { fseek(fd->stream->sm.sm_fp,fix(fd->filepos)+2,SEEK_SET);
+	   { fseeko(fd->stream->sm.sm_fp,fix(fd->filepos)+2,SEEK_SET);
 	    /* record the length of array needed to read the indices */
 	    PUT4(fix(fd->index));
 	    /* move back to where we were */
-	    fseek(fd->stream->sm.sm_fp,i,SEEK_SET);
+	    fseeko(fd->stream->sm.sm_fp,i,SEEK_SET);
 	  }}
 	 
       }
diff --git a/gcl/o/file.d b/gcl/o/file.d
index 49f016d64..885d358a0 100755
--- a/gcl/o/file.d
+++ b/gcl/o/file.d
@@ -37,6 +37,7 @@ Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 #define IN_FILE
 #include "include.h"
+#include "num_include.h"
 
 #ifdef HAVE_READLINE
 #define kclgetc(FP)		rl_getc_em(((FILE *)FP))
@@ -370,7 +371,7 @@ open_stream(object fn,enum smmode smm, object if_exists, object if_does_not_exis
 	while ((n=fread(FN4,1,sizeof(FN3),pp)))
 	  massert(fwrite(FN4,1,n,fp)==n);
 	massert(pclose(pp)>=0);
-	massert(!fseek(fp,0,SEEK_SET));
+	massert(!fseeko(fp,0,SEEK_SET));
 
       }
 
diff --git a/gcl/o/unexelf.c b/gcl/o/unexelf.c
index 9b90701f9..22448bddd 100755
--- a/gcl/o/unexelf.c
+++ b/gcl/o/unexelf.c
@@ -686,7 +686,7 @@ unexec (char *new_name, char *old_name, unsigned int data_start, unsigned int bs
      we'd dump our temporary buffers with Emacs, and we'd have to be
      extra careful to use the correct value of sbrk(0) after
      allocating all buffers in the code below, which we aren't.  */
-  old_file_size = stat_buf.st_size;
+  old_file_size = (size_t) stat_buf.st_size;
   old_base = mmap (NULL, old_file_size, PROT_READ,MAP_SHARED, old_file, 0);
   if (old_base == MAP_FAILED)
     fatal ("Can't allocate buffer for %s\n", old_name);
@@ -781,7 +781,7 @@ unexec (char *new_name, char *old_name, unsigned int data_start, unsigned int bs
   if (ftruncate (new_file, new_file_size))
     fatal ("Can't ftruncate (%s): errno %d\n", new_name, errno);
 
-  new_base = mmap (NULL, new_file_size, PROT_READ | PROT_WRITE,MAP_SHARED, new_file, 0);
+  new_base = mmap (NULL, (size_t) new_file_size, PROT_READ | PROT_WRITE,MAP_SHARED, new_file, 0);
   if (new_base == MAP_FAILED)
     fatal ("Can't allocate buffer for %s\n", old_name);
 
@@ -1217,7 +1217,7 @@ unexec (char *new_name, char *old_name, unsigned int data_start, unsigned int bs
   /* 	   new_file_size, new_base, errno); */
 
   munmap (old_base, old_file_size);
-  munmap (new_base, new_file_size);
+  munmap (new_base, (size_t) new_file_size);
 
   /* Close the files and make the new file executable.  */
 
diff --git a/gcl/o/unixfasl.c b/gcl/o/unixfasl.c
index d465a6c43..e492a7ba0 100755
--- a/gcl/o/unixfasl.c
+++ b/gcl/o/unixfasl.c
@@ -138,12 +138,12 @@ SEEK_TO_END_OFILE(faslfile->sm.sm_fp);
 #else  
 	fp = faslfile->sm.sm_fp;
 	fread(&faslheader, sizeof(faslheader), 1, fp);
-	fseek(fp,
+	fseeko(fp,
 	      faslheader.a_text+faslheader.a_data+
 	      faslheader.a_syms+faslheader.a_trsize+faslheader.a_drsize,
 	      1);
 	fread(&i, sizeof(i), 1, fp);
-	fseek(fp, i - sizeof(i), 1);
+	fseeko(fp, i - sizeof(i), 1);
 #endif
 	data = read_fasl_vector(faslfile);
 	vs_push(data);
@@ -165,7 +165,7 @@ SEEK_TO_END_OFILE(faslfile->sm.sm_fp);
 	vs_push(tempfile);
 	fp = tempfile->sm.sm_fp;
 
-	if (fseek(fp, textstart, 0) < 0)
+	if (fseeko(fp, textstart, 0) < 0)
 		error("file seek error");
 
 	fread(memory->cfd.cfd_start, textsize + datasize, 1, fp);
diff --git a/gcl/o/unixfsys.c b/gcl/o/unixfsys.c
index 100c44586..c04d69be2 100755
--- a/gcl/o/unixfsys.c
+++ b/gcl/o/unixfsys.c
@@ -25,6 +25,7 @@ Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 
 #define IN_UNIXFSYS
 #include "include.h"
+#include "num_include.h"
 #include <sys/types.h>
 #include <sys/stat.h>
 #ifndef NO_PWD_H
@@ -167,7 +168,7 @@ fopen_not_dir(char *filename,char *option) {
 
 }
 
-int
+off_t
 file_len(FILE *fp) {/*FIXME dir*/
 
   struct stat filestatus;
@@ -233,7 +234,7 @@ DEFUNM_NEW("STAT",object,fSstat,SI,1,1,NONE,OO,OO,OO,OO,(object x),"") {
 
   if (stat_internal(x,&ss))
     RETURN4(stat_mode_key(&ss),
-	    make_fixnum(ss.st_size),
+	    C_INT_TO_OBJ(ss.st_size),
 	    make_fixnum(ss.st_mtime),
 	    make_fixnum(ss.st_uid));
   else
diff --git a/gcl/o/unixsave.c b/gcl/o/unixsave.c
index bad16469e..8880af010 100755
--- a/gcl/o/unixsave.c
+++ b/gcl/o/unixsave.c
@@ -93,7 +93,7 @@ memory_save(original_file, save_file)
 char *original_file, *save_file;
 {	MEM_SAVE_LOCALS;
 	char *data_begin, *data_end;
-	int original_data;
+	off_t original_data = 0;
 	FILE *original, *save;
 	register int n;
 	register char *p;
@@ -130,7 +130,7 @@ char *original_file, *save_file;
 		} else
 			break;
 
-	fseek(original, original_data, 1);
+	fseeko(original, original_data, 1);
 
 	COPY_TO_SAVE;
 
diff --git a/gcl/unixport/bsd_rsym.c b/gcl/unixport/bsd_rsym.c
index a68caa6da..150d6b354 100755
--- a/gcl/unixport/bsd_rsym.c
+++ b/gcl/unixport/bsd_rsym.c
@@ -121,7 +121,7 @@ tab.n_symbols=0;tab.tot_leng=0;
  symout=fopen(outfile,"w");
  if (!symout)
    {perror(outfile); exit(1);};
- fseek(symout,sizeof(struct lsymbol_table),0);
+ fseeko(symout,sizeof(struct lsymbol_table),0);
  end = my_symbol_table + NSYMS(my_header);
  for (p = my_symbol_table; p < end; p++)	{
    /*
@@ -146,7 +146,7 @@ tab.n_symbols=0;tab.tot_leng=0;
    dprintf( index , (int) (p - my_symbol_table)  / sizeof(struct syment));
    p = p + NUM_AUX(p); }
  }
- fseek(symout,0,0);
+ fseeko(symout,0,0);
  fwrite(&tab,sizeof(tab),1,symout);
  fclose(symout);
  return 0;
diff --git a/gcl/unixport/rsym.c b/gcl/unixport/rsym.c
index 7ae66b062..6c3a06daa 100755
--- a/gcl/unixport/rsym.c
+++ b/gcl/unixport/rsym.c
@@ -102,7 +102,7 @@ char *filename;
 	sizeof(struct syment) and SYMESZ are not always the same.
 	*/
 
-	if(fseek(fp,(int)(N_SYMOFF(my_header)),0))
+	if(fseeko(fp,(off_t)(N_SYMOFF(my_header)),0))
 	  {fprintf(stderr,"seek error");
 					       exit(1);}
 
@@ -113,7 +113,7 @@ char *filename;
 		dprintf(string_size %d,string_size);
 		symbol_table[i].n_un.n_strx = string_size;
 		string_size += symbol_table[i].n_length + 1;
-		fseek(fp,symbol_table[i].n_length,1);
+		fseeko(fp,symbol_table[i].n_length,1);
 	      }
 #else	
 		fread((char *)&symbol_table[i], SYMESZ, 1, fp);
@@ -127,14 +127,14 @@ char *filename;
 	   strings follow symbol table! */
 #ifndef HPUX
 #ifdef N_STROFF
-	fseek(fp,N_STROFF(my_header),0);
+	fseeko(fp,N_STROFF(my_header),0);
 #endif	
 	if (fread((char *)&string_size, 4, 1, fp) > 0)	{
 		my_string_table = malloc(string_size);
                 if(debug)
-		  {printf(" string_size is %d fseek %d ",string_size,fseek(fp,string_size-1,1));
-		   printf(" fseek back %d ",fseek(fp,1-string_size,1));};
-		fseek(fp, -4, 1);
+		  {printf(" string_size is %d fseek %zd ",string_size,fseeko(fp,string_size-1,1));
+		   printf(" fseek back %d ",fseeko(fp,1-string_size,1));};
+		fseeko(fp, -4, 1);
 		if(string_size!=(fread(my_string_table, 1, string_size, fp)))
 		  {dprintf( string_size was %d ,string_size);
 		   perror("rsym could not read bad string table") ;
@@ -149,10 +149,10 @@ char *filename;
 		int slen;
 		p = my_string_table=malloc((unsigned int)string_size);
 		dprintf( string table leng = %d, string_size);
-		fseek(fp,(int)( LESYM_OFFSET(my_header)),  0);
+		fseeko(fp,(off_t)( LESYM_OFFSET(my_header)),  0);
 		for (i = 0;  i < nsyms; i++)
 		{
-			fseek(fp,SYMESZ, 1);
+			fseeko(fp,SYMESZ, 1);
 			slen = symbol_table[i].n_length;
 			dprintf( slen = %d,slen);
 			fread(p,slen,1,fp);
@@ -182,7 +182,7 @@ char *out;
  symout=fopen(out,"wr");
  if (!symout)
    {perror(out); exit(1);};
- fseek(symout,sizeof(struct lsymbol_table),0);
+ fseeko(symout,sizeof(struct lsymbol_table),0);
  end = symbol_table + nsyms;
  for (p = symbol_table; p < end; p++)	{
    /*
@@ -219,7 +219,7 @@ char *out;
        dprintf( index , (int) (p - symbol_table)  / sizeof(struct syment));
        p = p + NUM_AUX(p); }
  }
- fseek(symout,0,0);
+ fseeko(symout,0,0);
  fwrite(&tab,sizeof(tab),1,symout);
  fclose(symout);
 #ifdef AIX3
@@ -323,7 +323,7 @@ char *out;
   symin=fopen(out,"w");
   if(symin==0) perror("can't open");
   fwrite(&tab,sizeof(tab),1,symin);
-  fseek(symin,sizeof(tab),0);
+  fseeko(symin,sizeof(tab),0);
   {int i,j;
    unsigned short k;
    for (i=0 ; i < tab.n_symbols ; i++)
diff --git a/gcl/unixport/rsym_elf.c b/gcl/unixport/rsym_elf.c
index 714e18895..a270f6a9f 100755
--- a/gcl/unixport/rsym_elf.c
+++ b/gcl/unixport/rsym_elf.c
@@ -147,7 +147,7 @@ get_section(fp,name)
   else
     shndx = get_section_number(name);
   { 
-      fseek(fp,SECTION_H(shndx).sh_offset,SEEK_SET);
+      fseeko(fp,SECTION_H(shndx).sh_offset,SEEK_SET);
       ans = malloc(SECTION_H(shndx).sh_size);
       fread(ans,SECTION_H(shndx).sh_size,1,fp);
       return ans;
@@ -173,7 +173,7 @@ char *filename;
 	}
 
 	fread(&eheader,sizeof(eheader),1,fp);
-	fseek(fp,eheader.e_ehsize,SEEK_SET);
+	fseeko(fp,eheader.e_ehsize,SEEK_SET);
 	fread(&pheader,sizeof(pheader),1,fp);
 
 	if(ELFMAG0 != eheader.e_ident[0]){
@@ -182,7 +182,7 @@ char *filename;
 
 	section_headers = (void *)malloc(sizeof(ElfW(Shdr))*
 				 (1+ eheader.e_shnum));
-	fseek(fp,eheader.e_shoff,0);
+	fseeko(fp,eheader.e_shoff,0);
 	for (i=0 ; i< eheader.e_shnum ; i++)
 	  fread(&section_headers[i],eheader.e_shentsize,1,fp);
 				 
@@ -196,7 +196,7 @@ char *filename;
 	sizeof(struct syment) and SYMESZ are not always the same.
 	*/
 
-	if(fseek(fp,(int)SECTION_H(symbol_index).sh_offset,0))
+	if(fseeko(fp,(off_t)SECTION_H(symbol_index).sh_offset,0))
 	  {fprintf(stderr,"seek error");
 					       exit(1);}
 
@@ -242,7 +242,7 @@ char *out;
  symout=fopen(out,"wr");
  if (!symout)
    {perror(out); exit(1);};
- fseek(symout,sizeof(struct lsymbol_table),0);
+ fseeko(symout,sizeof(struct lsymbol_table),0);
  end = symbol_table + nsyms;
  for (p = symbol_table; p < end; p++)	{
    /*
@@ -300,7 +300,7 @@ char *out;
        dprintf( index , (int) (p - symbol_table)  / sizeof(STRUCT_SYMENT));
        p = p + NUM_AUX(p); }
  }
- fseek(symout,0,0);
+ fseeko(symout,0,0);
  fwrite(&tab,sizeof(tab),1,symout);
  fclose(symout);
 #ifdef AIX3
