commit a17145fb6bab01dd01736379f672a8e868bf142c
Author: Petr Zima <zima@matfyz.cz>
Date:   Thu Apr 2 12:27:55 2020 +0200

    unrandomize.patch

diff --git a/gcl/configure b/gcl/configure
index 5955e409a..272ee1f26 100755
--- a/gcl/configure
+++ b/gcl/configure
@@ -7355,8 +7355,10 @@ else
 
 		    #include <stdio.h>
 		    #include <stdlib.h>
+		    #define CAN_UNRANDOMIZE_SBRK 1
+		    #include "h/unrandomize.h"
 		    int main(int argc,char *argv[],char *envp[]) {
-			#include "h/unrandomize.h"
+		    UNRANDOMIZE_SBRK;
 			return 0;
 		    }
 
@@ -7390,15 +7392,13 @@ else
 
 		    #include <stdio.h>
 		    #include <stdlib.h>
+			#include "h/unrandomize.h"
 		    int main(int argc,char * argv[],char * envp[]) {
 			FILE *f;
-			#ifdef CAN_UNRANDOMIZE_SBRK
-			#include "h/unrandomize.h"
-			#endif
-			if (!(f=fopen("conftest1","w")))
-			   return -1;
-			   fprintf(f,"%p",sbrk(0));
-			   return 0;
+			UNRANDOMIZE_SBRK;
+			if (!(f=fopen("conftest1","w"))) return -1;
+            fprintf(f,"%p",sbrk(0));
+            return 0;
 		    }
 
 _ACEOF
@@ -7425,11 +7425,10 @@ else
 
 		    #include <stdio.h>
 		    #include <stdlib.h>
+		    #include "h/unrandomize.h"
 		    int main(int argc,char * argv[],char * envp[]) {
 			FILE *f;
-			#ifdef CAN_UNRANDOMIZE_SBRK
-			#include "h/unrandomize.h"
-			#endif
+			UNRANDOMIZE_SBRK;
 			if (!(f=fopen("conftest1","w"))) return -1;
 			   fprintf(f,"%p",sbrk(0));
 			   return 0;
@@ -7526,15 +7525,14 @@ else
 
 		#include <stdio.h>
 		#include <stdlib.h>
+	    #include "h/unrandomize.h"
 		int
 		main(int argc,char **argv,char **envp) {
 		    void *v ;
 		    FILE *fp = fopen("conftest1","w");
 		    unsigned long i,j;
 
-		    #ifdef CAN_UNRANDOMIZE_SBRK
-		    #include "h/unrandomize.h"
-		    #endif
+	        UNRANDOMIZE_SBRK;
 		    j=1;
 		    j<<=$PAGEWIDTH;
 		    j<<=16;
@@ -7578,15 +7576,14 @@ else
 
 		#include <stdio.h>
 		#include <stdlib.h>
+	    #include "h/unrandomize.h"
 		int
 		main(int argc,char **argv,char **envp) {
 		    void *v ;
 		    FILE *fp = fopen("conftest1","w");
 		    unsigned long i,j;
 
-		    #ifdef CAN_UNRANDOMIZE_SBRK
-		    #include "h/unrandomize.h"
-		    #endif
+	        UNRANDOMIZE_SBRK;
 		    j=1;
 		    j<<=$PAGEWIDTH;
 		    j<<=16;
@@ -7631,11 +7628,10 @@ else
 
 		#include <stdio.h>
 		#include <stdlib.h>
+	    #include "h/unrandomize.h"
 		int
 		main(int argc,char **argv,char **envp) {
-		    #ifdef CAN_UNRANDOMIZE_SBRK
-		    #include "h/unrandomize.h"
-		    #endif
+	        UNRANDOMIZE_SBRK;
 		    return (long)$cstack_address<0 ? 0 : -1;
 		}
 _ACEOF
@@ -7669,13 +7665,12 @@ else
 
 		#include <stdio.h>
 		#include <stdlib.h>
+	    #include "h/unrandomize.h"
 		int main(int argc,char **argv,char **envp) {
 		    void *b,*c;
 		    FILE *fp = fopen("conftest1","w");
 		    long n;
-		    #ifdef CAN_UNRANDOMIZE_SBRK
-		    #include "h/unrandomize.h"
-		    #endif
+	        UNRANDOMIZE_SBRK;
 		    b=alloca(sizeof(b));
 		    c=alloca(sizeof(c));
 		    n=b>c ? b-c : c-b;
diff --git a/gcl/configure.in b/gcl/configure.in
index 07136e858..a0a68ab5e 100644
--- a/gcl/configure.in
+++ b/gcl/configure.in
@@ -1122,8 +1122,10 @@ if test "$HAVE_SBRK" = "1" ; then
 		[[
 		    #include <stdio.h>
 		    #include <stdlib.h>
+		    #define CAN_UNRANDOMIZE_SBRK 1
+		    #include "h/unrandomize.h"
 		    int main(int argc,char *argv[],char *envp[]) {
-			#include "h/unrandomize.h"
+		    UNRANDOMIZE_SBRK;
 			return 0;
 		    }
 		]])],
@@ -1138,11 +1140,10 @@ if test "$HAVE_SBRK" = "1" ; then
 		[[
 		    #include <stdio.h>
 		    #include <stdlib.h>
+		    #include "h/unrandomize.h"
 		    int main(int argc,char * argv[],char * envp[]) {
 			FILE *f;
-			#ifdef CAN_UNRANDOMIZE_SBRK
-			#include "h/unrandomize.h"
-			#endif
+			UNRANDOMIZE_SBRK;
 			if (!(f=fopen("conftest1","w")))
 			   return -1;
 			   fprintf(f,"%p",sbrk(0));
@@ -1159,11 +1160,10 @@ if test "$HAVE_SBRK" = "1" ; then
 		[[
 		    #include <stdio.h>
 		    #include <stdlib.h>
+		    #include "h/unrandomize.h"
 		    int main(int argc,char * argv[],char * envp[]) {
 			FILE *f;
-			#ifdef CAN_UNRANDOMIZE_SBRK
-			#include "h/unrandomize.h"
-			#endif
+			UNRANDOMIZE_SBRK;
 			if (!(f=fopen("conftest1","w"))) return -1;
 			   fprintf(f,"%p",sbrk(0));
 			   return 0;
@@ -1222,15 +1222,14 @@ AC_RUN_IFELSE(
 	    [[
 		#include <stdio.h>
 		#include <stdlib.h>
+	    #include "h/unrandomize.h"
 		int
 		main(int argc,char **argv,char **envp) {
 		    void *v ;
 		    FILE *fp = fopen("conftest1","w");
 		    unsigned long i,j;
 		    
-		    #ifdef CAN_UNRANDOMIZE_SBRK
-		    #include "h/unrandomize.h"
-		    #endif
+	        UNRANDOMIZE_SBRK;
 		    j=1;
 		    j<<=$PAGEWIDTH;
 		    j<<=16;
@@ -1253,15 +1252,14 @@ AC_RUN_IFELSE(
 	    [[
 		#include <stdio.h>
 		#include <stdlib.h>
+	    #include "h/unrandomize.h"
 		int
 		main(int argc,char **argv,char **envp) {
 		    void *v ;
 		    FILE *fp = fopen("conftest1","w");
 		    unsigned long i,j;
 		    
-		    #ifdef CAN_UNRANDOMIZE_SBRK
-		    #include "h/unrandomize.h"
-		    #endif
+	        UNRANDOMIZE_SBRK;
 		    j=1;
 		    j<<=$PAGEWIDTH;
 		    j<<=16;
@@ -1304,13 +1302,12 @@ AC_RUN_IFELSE(
 	    [[
 		#include <stdio.h>
 		#include <stdlib.h>
+	    #include "h/unrandomize.h"
 		int main(int argc,char **argv,char **envp) {
 		    void *b,*c;
 		    FILE *fp = fopen("conftest1","w");
 		    long n;
-		    #ifdef CAN_UNRANDOMIZE_SBRK
-		    #include "h/unrandomize.h"
-		    #endif
+	        UNRANDOMIZE_SBRK;
 		    b=alloca(sizeof(b));
 		    c=alloca(sizeof(c));
 		    n=b>c ? b-c : c-b;
diff --git a/gcl/h/unrandomize.h b/gcl/h/unrandomize.h
index a11374b38..fbbf8f097 100644
--- a/gcl/h/unrandomize.h
+++ b/gcl/h/unrandomize.h
@@ -1,3 +1,5 @@
+#include <stdio.h>
+#include <stdlib.h>
 #include <sys/personality.h>
 #include <syscall.h>
 #include <unistd.h>
@@ -5,61 +7,66 @@
 #include <alloca.h>
 #include <errno.h>
 
-{
-  errno=0;
-
-  {
-
-    /*READ_IMPLIES_EXEC is for selinux, but selinux will reset it in the child*/
-    long pers = personality(READ_IMPLIES_EXEC|personality(0xffffffffUL));
-    long flag = ADDR_NO_RANDOMIZE;
-
-    if (sizeof(long)==4) flag|=ADDR_LIMIT_3GB/* |ADDR_COMPAT_LAYOUT */;
-
-    if (pers==-1) {printf("personality failure %d\n",errno);exit(-1);}
-    if ((pers & flag)!=flag && !getenv("GCL_UNRANDOMIZE")) {
-      errno=0;
-      if (personality(pers | flag) != -1 && (personality(0xffffffffUL) & flag)==flag) {
-	int i,j,k;
-	char **n,**a;
-	void *v;
-	for (i=j=0;argv[i];i++)
-	  j+=strlen(argv[i])+1;
-	for (k=0;envp[k];k++)
-	  j+=strlen(envp[k])+1;
-	j+=(i+k+3)*sizeof(char *);
-	if ((v=sbrk(j))==(void *)-1) {
-	  printf("Cannot brk environment space\n");
-	  exit(-1);
-	}
-	a=v;
-	v=a+i+1;
-	n=v;
-	v=n+k+2;
-	for (i=0;argv[i];i++) {
-	  a[i]=v;
-	  strcpy(v,argv[i]);
-	  v+=strlen(v)+1;
-	}
-	a[i]=0;
-	for (k=0;envp[k];k++) {
-	  n[k]=v;
-	  strcpy(v,envp[k]);
-	  v+=strlen(v)+1;
-	}
-	n[k]="GCL_UNRANDOMIZE=t";
-	n[k+1]=0;
-	errno=0;
-#ifdef HAVE_GCL_CLEANUP	
-	gcl_cleanup(0);
+#ifdef CAN_UNRANDOMIZE_SBRK
+# ifdef HAVE_GCL_CLEANUP
+#  define GCL_CLEANUP gcl_cleanup(0)
+# else
+#  define GCL_CLEANUP
+# endif
+# define UNRANDOMIZE_SBRK do {						\
+  errno=0;								\
+  {									\
+    /*READ_IMPLIES_EXEC is for selinux, but selinux will reset it in the child*/ \
+    long pers = personality(0xffffffffUL);				\
+    long flag = ADDR_NO_RANDOMIZE;					\
+									\
+    if (sizeof(long)==4) flag|=ADDR_LIMIT_3GB|ADDR_COMPAT_LAYOUT;	\
+									\
+    if (pers==-1) {printf("personality failure %d\n",errno);exit(-1);}	\
+    if ((pers & flag)!=flag && !getenv("GCL_UNRANDOMIZE")) {		\
+      errno=0;								\
+      if (personality(pers | flag) != -1 && (personality(0xffffffffUL) & flag)==flag) { \
+	int i,j,k;							\
+	char **n,**a;							\
+	void *v;							\
+	for (i=j=0;argv[i];i++)						\
+	  j+=strlen(argv[i])+1;						\
+	for (k=0;envp[k];k++)						\
+	  j+=strlen(envp[k])+1;						\
+	j+=(i+k+3)*sizeof(char *);					\
+	if ((v=sbrk(j))==(void *)-1) {					\
+	  printf("Cannot brk environment space\n");			\
+	  exit(-1);							\
+	}								\
+	a=v;								\
+	v=a+i+1;							\
+	n=v;								\
+	v=n+k+2;							\
+	for (i=0;argv[i];i++) {						\
+	  a[i]=v;							\
+	  strcpy(v,argv[i]);						\
+	  v+=strlen(v)+1;						\
+	}								\
+	a[i]=0;								\
+	for (k=0;envp[k];k++) {						\
+	  n[k]=v;							\
+	  strcpy(v,envp[k]);						\
+	  v+=strlen(v)+1;						\
+	}								\
+	n[k]="GCL_UNRANDOMIZE=t";					\
+	n[k+1]=0;							\
+	errno=0;							\
+	GCL_CLEANUP;							\
+	execve(*a,a,n);							\
+	printf("execve failure %d\n",errno);				\
+	exit(-1);							\
+      } else {								\
+	printf("personality change failure %d\n",errno);		\
+	exit(-1);							\
+      }									\
+    }									\
+  }									\
+} while (0)
+#else
+# define UNRANDOMIZE_SBRK
 #endif
-	execve(*a,a,n);
-	printf("execve failure %d\n",errno);
-	exit(-1);
-      } else {
-	printf("personality change failure %d\n",errno);
-	exit(-1);
-      }
-    }
-  }
-}
diff --git a/gcl/o/main.c b/gcl/o/main.c
index 529ee1f8d..7a6093f9d 100755
--- a/gcl/o/main.c
+++ b/gcl/o/main.c
@@ -53,6 +53,7 @@ void initialize_process();
 #include "include.h"
 #include <signal.h>
 #include "page.h"
+#include "unrandomize.h"
 
 bool saving_system=FALSE;
 
@@ -500,15 +501,11 @@ main(int argc, char **argv, char **envp) {
 
   GET_FULL_PATH_SELF(kcl_self);
   *argv=kcl_self;
-
-#ifdef CAN_UNRANDOMIZE_SBRK
-#include <stdio.h>
-#include <stdlib.h>
-#include "unrandomize.h"
-#endif
-
+  
+  UNRANDOMIZE_SBRK;
+  
   gcl_init_alloc(&argv);
-
+  
   setbuf(stdin, stdin_buf); 
   setbuf(stdout, stdout_buf);
 #ifdef _WIN32
